name: DevSecOps Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    name: Build and Push DVWA Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:latest \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:latest
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }}

  semgrep_scan:
    name: semgrep/ci
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Perform Semgrep Analysis
        run: semgrep scan -q --sarif --config auto . > semgrep-results.sarif

      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      - name: Upload SARIF result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  gitleaks:
    name: Secrets Scan - Gitleaks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          format: sarif
          output: gitleaks.sarif
          no-git: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify report exists
        run: |
          if [ -f "gitleaks.sarif" ]; then
            echo "Report generated successfully"
            cat gitleaks.sarif | jq empty
          else
            echo "No report generated - creating empty file"
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0.json", "runs": []}' > gitleaks.sarif
          fi
          
      - name: Upload Gitleaks report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  dependency-check:
    name: SCA - Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DVWA'
          format: 'ALL'
          out: 'reports'
          
      - name: Upload Dependency Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/
        if: always()

  dast:
    name: DAST - OWASP ZAP Scan (DinD)
    runs-on: ubuntu-latest
    container:
      image: docker:24.0.7-dind
      options: --privileged
      env:
        DOCKER_TLS_CERTDIR: ""
    services:
      docker:
        image: docker:24.0.7-dind
        options: --privileged
        env:
          DOCKER_TLS_CERTDIR: ""

    steps:
      - name: Install tools (curl, bash, docker-cli, docker-compose)
        run: |
          apk add --no-cache bash curl docker-cli docker-compose

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy DVWA with Compose
        run: |
          echo 'version: "3.8"
          services:
            db:
              image: mariadb
              environment:
                MYSQL_ROOT_PASSWORD: root
                MYSQL_DATABASE: dvwa
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
                interval: 10s
                timeout: 5s
                retries: 5

            dvwa:
              image: vulnerables/web-dvwa
              ports:
                - "4280:80"
              environment:
                PHPIDS_ENABLED: "false"
                DVWA_SECURITY: "low"
              depends_on:
                db:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost/setup.php"]
                interval: 10s
                timeout: 5s
                retries: 10
          ' > docker-compose.yml

          docker compose up -d

          DVWA_CONTAINER=$(docker compose ps -q dvwa)
          

          echo "Waiting for DVWA container ($DVWA_CONTAINER) to be healthy..."
          timeout 300 bash -c 'until [[ "$(docker inspect -f "{{.State.Health.Status}}" $DVWA_CONTAINER)" == "healthy" ]]; do
            echo "Waiting for DVWA to be healthy..."
            docker compose ps
            sleep 5
          done'

          curl -v http://localhost:4280
          


      - name: Run OWASP ZAP Scan
        run: |
          docker pull owasp/zap2docker-stable

          docker run --network "$(docker network ls --filter name=dvwa-cicd_default --format '{{.Name}}')" \
            owasp/zap2docker-stable zap-baseline.py \
            -t http://dvwa \
            -r zap_report.html \
            -m 5

          mkdir -p zap-reports
          docker cp $(docker ps -alq):/zap/zap_report.html zap-reports/

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: zap-reports/zap_report.html



