name: DVWA DevSecOps Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write

jobs:
  build:
    name: Build and Push DVWA Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:latest \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:latest
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }}

  semgrep_scan:
    name: Static Code Analysis - Semgrep
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep:latest
    if: github.actor != 'dependabot[bot]'

    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: semgrep scan -q --sarif --config auto . > semgrep-results.sarif

      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.sarif

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  secrets_scan:
    name: Secrets Scan - TruffleHog
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # pełna historia dla lepszego skanowania, ale nie jest konieczne

      - name: Run TruffleHog scan
        uses: trufflesecurity/trufflehog@main
        with:
          scan: filesystem       # skanuj katalog z checkoutem
          path: '.'             # ścieżka do kodu źródłowego
          output: 'trufflehog-results.json'  # zapisz raport do pliku
          redact: false         # pokaż pełne sekretne wartości w raporcie
          json: true            # wymuś format JSON (zalecane do analizy)

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: trufflehog-results.json

      - name: Display scan results
        run: cat trufflehog-results.json

  dependency_check:
    name: SCA - OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DVWA'
          format: 'ALL'
          out: 'dependency-check-report'

      - name: Upload Dependency Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report/
        if: always()

  dast:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375

    steps:
      - uses: actions/checkout@v4

      - name: Start DVWA container
        run: |
          docker pull vulnerables/web-dvwa:latest
          docker run -d --name dvwa -p 3000:80 -e PHPIDS_ENABLE=no vulnerables/web-dvwa:latest

      - name: Wait for DVWA to be ready
        run: |
          echo "Waiting for DVWA to be healthy..."
          for i in {1..60}; do
            if curl -s http://localhost:3000/login.php | grep -q "Damn Vulnerable Web Application"; then
              echo "DVWA is up!"
              exit 0
            else
              echo "Waiting 5 seconds..."
              sleep 5
            fi
          done
          echo "DVWA did not start in time"
          exit 1


      - name: Run OWASP ZAP Baseline Scan
        id: zap-scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: "http://localhost:3000"
          cmd_options: "-I -J report_json.json -w report_md.md -r report_html.html"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Upload ZAP reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            report_json.json
            report_md.md
            report_html.html


      - name: Stop and remove DVWA container
        if: always()
        run: |
          docker stop dvwa
          docker rm dvwa
