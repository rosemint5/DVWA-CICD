name: DevSecOps Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    name: Build and Push DVWA Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:latest \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:latest
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }}

  semgrep_scan:
    name: semgrep/ci
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Perform Semgrep Analysis
        run: semgrep scan -q --sarif --config auto . > semgrep-results.sarif

      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      - name: Upload SARIF result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  gitleaks:
    name: Secrets Scan - Gitleaks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          format: sarif
          output: gitleaks.sarif
          no-git: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify report exists
        run: |
          if [ -f "gitleaks.sarif" ]; then
            echo "Report generated successfully"
            cat gitleaks.sarif | jq empty
          else
            echo "No report generated - creating empty file"
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0.json", "runs": []}' > gitleaks.sarif
          fi
          
      - name: Upload Gitleaks report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  dependency-check:
    name: SCA - Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DVWA'
          format: 'ALL'
          out: 'reports'
          
      - name: Upload Dependency Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/
        if: always()

  dast:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      packages: read

    services:
      docker:
        image: docker:dind
        options: --privileged
    container:
      image: ubuntu:22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          apt-get update
          apt-get install -y docker-compose-plugin

      - name: Deploy DVWA with Compose
        run: |
          echo 'version: "3.8"
          services:
            dvwa:
              image: vulnerables/web-dvwa
              ports:
                - "3000:80"
              environment:
                PHPIDS_ENABLED: "false"
                DVWA_SECURITY: "low"
              healthcheck:
                test: ["CMD-SHELL", "mysqladmin ping -h127.0.0.1 && curl -f http://localhost/setup.php"]
                interval: 10s
                timeout: 5s
                retries: 30
              mem_limit: 512m
          ' > docker-compose.yml
          
          docker compose up -d
          
          # Wait for healthy status
          timeout 300 bash -c 'while [[ $(docker inspect -f "{{.State.Health.Status}}" dvwa-dvwa-1) != "healthy" ]]; do
            echo "Waiting for DVWA to be ready..."
            docker compose logs --tail=20 dvwa
            sleep 10
          done'
          
          # Force DB setup if needed
          docker compose exec dvwa curl http://localhost/setup.php?create_db=1 -v

      - name: Verify DVWA
        run: |
          docker compose ps
          curl -v http://localhost:3000

      - name: Run OWASP ZAP Scan
        run: |
          # Pull ZAP image
          docker pull owasp/zap2docker-stable
          
          # Run scan with increased timeout
          docker run --network host -i owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:3000 \
            -r scan_report.html \
            -m 5
          
          # Store report
          mkdir -p zap-reports
          docker cp $(docker ps -alq):/zap/scan_report.html zap-reports/
          
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: zap-reports/scan_report.html
