name: DVWA DevSecOps Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  actions: read
  packages: write  # potrzebne do GHCR

jobs:
  build:
    name: Build and Push DVWA Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:latest \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:latest
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }}

  semgrep_scan:
    name: Static Code Analysis - Semgrep
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep:latest
    if: github.actor != 'dependabot[bot]'

    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: semgrep scan -q --sarif --config auto . > semgrep-results.sarif

      - name: Upload SARIF results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: semgrep-results.sarif

      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  gitleaks:
    name: Secrets Scan - Gitleaks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: gitleaks/gitleaks-action@v2
        with:
          format: sarif
          output: gitleaks.sarif
          no-git: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify gitleaks report
        run: |
          if [ -f "gitleaks.sarif" ]; then
            echo "Gitleaks report exists"
            cat gitleaks.sarif | jq empty
          else
            echo "Creating empty gitleaks report"
            echo '{"version":"2.1.0","$schema":"https://json.schemastore.org/sarif-2.1.0.json","runs":[]}' > gitleaks.sarif
          fi

      - name: Upload gitleaks report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  dependency_check:
    name: SCA - OWASP Dependency Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DVWA'
          format: 'ALL'
          out: 'dependency-check-report'

      - name: Upload Dependency Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dependency-check-report/
        if: always()

  dast:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2375:2375

    steps:
      - uses: actions/checkout@v4

      - name: Start DVWA container
        run: |
          docker pull vulnerables/web-dvwa:latest
          docker run -d --name dvwa -p 3000:80 vulnerables/web-dvwa:latest

      - name: Wait for DVWA to be ready
        run: |
          echo "Waiting for DVWA to be healthy..."
          for i in {1..30}; do
            if curl -s http://localhost:3000/login.php | grep -q "Damn Vulnerable Web Application"; then
              echo "DVWA is up!"
              exit 0
            else
              echo "Waiting 5 seconds..."
              sleep 5
            fi
          done
          echo "DVWA did not start in time"
          exit 1

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: "http://localhost:3000"
          cmd_options: "-I -J zap-report.json -w zap-report.md -r zap-report.html"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: |
            zap-report.json
            zap-report.md
            zap-report.html

      - name: Stop and remove DVWA container
        run: |
          docker stop dvwa
          docker rm dvwa
