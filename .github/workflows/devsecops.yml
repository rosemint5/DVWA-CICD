name: DevSecOps Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    name: Build and Push DVWA Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated from v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:latest \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:latest
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }}

  semgrep_scan:
    name: semgrep/ci
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated from v3

      - name: Perform Semgrep Analysis
        run: semgrep scan -q --sarif --config auto . > semgrep-results.sarif

      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v4  # Fixed: Updated from v3 to v4
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      - name: Upload SARIF result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  gitleaks:
    name: Secrets Scan - Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-check:
    name: SCA - Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DVWA'
          format: 'ALL'
          out: 'reports'

  dast:
    name: DAST - OWASP ZAP Scan (DinD)
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      packages: read

    services:
      dind:
        image: docker:dind
        ports:
          - 2375:2375
        env:
          DOCKER_TLS_CERTDIR: ""
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        

      - name: Set up Docker CLI
        run: |
          # Wait for DinD to be ready
          timeout 30s bash -c 'until docker --host tcp://localhost:2375 info >/dev/null 2>&1; do sleep 1; done'
        
          # Configure environment
          echo "DOCKER_HOST=tcp://localhost:2375" >> $GITHUB_ENV
          echo "DOCKER_TLS_VERIFY=" >> $GITHUB_ENV
          echo "DOCKER_CERT_PATH=" >> $GITHUB_ENV

      - name: Start DVWA container
        run: |
          docker run -d \
            --name dvwa \
            -p 4280:80 \
            --health-cmd "curl -f http://localhost || exit 1" \
            --health-interval 5s \
            --health-retries 10 \
            --rm \
            vulnerables/web-dvwa
        
          # Wait for health status
          echo "Waiting for DVWA to be healthy..."
          timeout 120s bash -c 'until [ "$(docker inspect -f {{.State.Health.Status}} dvwa)" == "healthy" ]; do sleep 5; done'
        
          # Verify manually as fallback
          curl --retry 10 --retry-delay 5 -v http://localhost:4280

      - name: Run ZAP Scan with explicit output
        run: |
          docker run --network host \
            -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable \
            zap-baseline.py \
            -t http://localhost:4280 \
            -J zap-report.json \
            -w zap-report.md \
            -r zap-report.html \
            -I -j
        
          # Ensure files exist
          ls -la zap-report.*

      - name: Upload report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.md
