name: DevSecOps Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    name: Build and Push DVWA Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:latest \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:latest
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }}

  semgrep_scan:
    name: semgrep/ci
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Perform Semgrep Analysis
        run: semgrep scan -q --sarif --config auto . > semgrep-results.sarif

      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      - name: Upload SARIF result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  gitleaks:
    name: Secrets Scan - Gitleaks
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: .gitleaks.toml
          format: sarif
          output: gitleaks.sarif
          no-git: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify report exists
        run: |
          if [ -f "gitleaks.sarif" ]; then
            echo "Report generated successfully"
            cat gitleaks.sarif | jq empty
          else
            echo "No report generated - creating empty file"
            echo '{"version": "2.1.0", "$schema": "https://json.schemastore.org/sarif-2.1.0.json", "runs": []}' > gitleaks.sarif
          fi
          
      - name: Upload Gitleaks report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  dependency-check:
    name: SCA - Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DVWA'
          format: 'ALL'
          out: 'reports'
          
      - name: Upload Dependency Check report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/
        if: always()

  dast:
    name: DAST - OWASP ZAP Scan (DinD)
    runs-on: ubuntu-latest
    needs: build
    container:
      image: docker:24.0.7-dind
      options: --privileged
      env:
        DOCKER_TLS_CERTDIR: ""
    services:
      docker:
        image: docker:24.0.7-dind
        options: --privileged
        env:
          DOCKER_TLS_CERTDIR: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tools
        run: apk add --no-cache curl jq

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull DVWA image
        run: docker pull ghcr.io/${{ github.repository_owner }}/dvwa:latest

      - name: Start DVWA container with health check
        run: |
          # Start MySQL service first if needed
          docker run -d --name dvwa-mysql -e MYSQL_ROOT_PASSWORD=p@ssw0rd -e MYSQL_DATABASE=dvwa mysql:5.7
          
          # Start DVWA with proper initialization
          docker run -d \
            --name dvwa \
            -p 4280:80 \
            --link dvwa-mysql:mysql \
            -e DB_SERVER=mysql \
            -e DB_USER=root \
            -e DB_PASSWORD=p@ssw0rd \
            -e DB_NAME=dvwa \
            --health-cmd="curl -f http://localhost || exit 1" \
            --health-interval=10s \
            --health-retries=6 \
            --health-start-period=30s \
            --rm \
            ghcr.io/${{ github.repository_owner }}/dvwa:latest
          
          echo "Waiting for DVWA to be ready..."
          # Wait for health check to pass
          timeout 180 bash -c 'while [[ $(docker inspect -f "{{.State.Health.Status}}" dvwa) != "healthy" ]]; do sleep 10; echo "Waiting..."; done' || \
            (echo "DVWA failed to become healthy"; docker logs dvwa; exit 1)

      - name: Verify DVWA accessibility
        run: |
          echo "Testing DVWA accessibility..."
          curl -v http://localhost:4280/setup.php
          curl -s http://localhost:4280 | grep "Damn Vulnerable Web Application" || \
            (echo "DVWA not running properly"; docker logs dvwa; exit 1)

      - name: Run OWASP ZAP Scan
        if: success()
        uses: zaproxy/action-full-scan@v0.6.0
        with:
          target: 'http://localhost:4280'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
          fail_action: true
        env:
          ZAP_AUTH_HEADER: "Authorization: Bearer ${{ secrets.ZAP_API_KEY }}"
          
      - name: Cleanup
        if: always()
        run: |
          docker stop dvwa || true
          docker stop dvwa-mysql || true
          docker rm dvwa || true
          docker rm dvwa-mysql || true

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: zap-reports/zap_report.html



