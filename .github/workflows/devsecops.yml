name: DevSecOps Pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  build:
    name: Build and Push DVWA Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # Required for pushing to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Updated from v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:latest \
            --tag ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }} \
            .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:latest
          docker push ghcr.io/${{ github.repository_owner }}/dvwa:${{ github.sha }}

  semgrep_scan:
    name: semgrep/ci
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]')
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated from v3

      - name: Perform Semgrep Analysis
        run: semgrep scan -q --sarif --config auto . > semgrep-results.sarif

      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v4  # Fixed: Updated from v3 to v4
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      - name: Upload SARIF result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
        if: always()

  gitleaks:
    name: Secrets Scan - Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-check:
    name: SCA - Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'DVWA'
          format: 'ALL'
          out: 'reports'

  dast:
    name: DAST - OWASP ZAP Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      packages: read

    services:
      dvwa:
        image: vulnerables/web-dvwa
        ports:
          - 4280:80
        options: >-
          --health-cmd="curl -f http://localhost:80/setup.php || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for DVWA to be healthy
        run: |
          echo "Waiting for DVWA to be ready..."
          # Wait for both container health and direct access
          timeout 180s bash -c '
            until docker inspect dvwa | grep "healthy" >/dev/null && 
                  curl -s http://localhost:4280/login.php | grep "Damn Vulnerable Web Application" >/dev/null; 
            do 
              echo "Still waiting..."; 
              sleep 10; 
            done'
        
          # Final verification
          curl -v http://localhost:4280/login.php
          docker logs dvwa

      - name: Run ZAP Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: "http://localhost:4280"
          cmd_options: "-I -J zap-report.json -w zap-report.md -r zap-report.html"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-reports
          path: |
            zap-report.html
            zap-report.json
            zap-report.md
